version: "3.3"

networks:
  clean-arc-network:
    driver: bridge

services:
  clean-arc-relational-db:
    image: docker.io/bitnami/postgresql:15
    container_name: clean-arc-relational-db
    ports:
      - "5432:5432"
    networks:
      - clean-arc-network
    environment:
      POSTGRESQL_USERNAME: "cleanarc"
      POSTGRESQL_PASSWORD: "cleanarc!123"
      POSTGRESQL_DATABASE: "cleanarc"
    volumes:
      - "./docker_volumes/cleanarc_db_data:/bitnami/postgresql"
    restart: always
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: 20m
  init-external-services-db:
    image: postgres:15-alpine
    networks:
      - clean-arc-network
    depends_on:
      - clean-arc-relational-db
    environment:
      PGPASSWORD: "cleanarc!123"
    entrypoint: [ "sh", "-c" ]
    command: >
      "
      until pg_isready -h clean-arc-relational-db -p 5432 -U cleanarc; do
        echo 'Waiting for DB...';
        sleep 2;
      done;
      psql -h clean-arc-relational-db -U cleanarc -tc \"SELECT 1 FROM pg_database WHERE datname = 'keycloak'\" |
        grep -q 1 || psql -h clean-arc-relational-db -U cleanarc -c 'CREATE DATABASE keycloak;';
      psql -h clean-arc-relational-db -U cleanarc -tc \"SELECT 1 FROM pg_database WHERE datname = 'openfga'\" |
        grep -q 1 || psql -h clean-arc-relational-db -U cleanarc -c 'CREATE DATABASE openfga;';
      "
  clean-arc-authentication-service:
    image: quay.io/phasetwo/phasetwo-keycloak:26.1.4
    container_name: clean-arc-authentication-service
    ports:
      - "8081:8080"
    networks:
      - clean-arc-network
    depends_on:
      - clean-arc-relational-db
      - init-external-services-db
    environment:
      PROXY_ADDRESS_FORWARDING: "true"
      KC_BOOTSTRAP_ADMIN_USERNAME: "admin"
      KC_BOOTSTRAP_ADMIN_PASSWORD: "admin"
      KC_DB: "postgres"
      KC_DB_URL_HOST: "clean-arc-relational-db"
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: "keycloak"
      KC_DB_SCHEMA: "public"
      KC_DB_USERNAME: "cleanarc"
      KC_DB_PASSWORD: "cleanarc!123"
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
      KC_PROXY: "edge"
      KC_LOG_LEVEL: INFO
    command:
      [ "start-dev", "--spi-events-listener-ext-event-webhook-enabled=true" ]
    restart: always
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: 20m
  clean-arc-authorization-service-migration:
    image: openfga/openfga:v1.8.9
    container_name: clean-arc-authorization-service-migration
    networks:
      - clean-arc-network
    depends_on:
      - clean-arc-relational-db
      - init-external-services-db
    environment:
      OPENFGA_DATASTORE_ENGINE: "postgres"
      OPENFGA_DATASTORE_URI: "postgres://cleanarc:cleanarc!123@clean-arc-relational-db:5432/openfga?sslmode=disable"
    command: migrate
  clean-arc-authorization-service:
    image: openfga/openfga:v1.8.9
    container_name: clean-arc-authorization-service
    networks:
      - clean-arc-network
    depends_on:
      clean-arc-authorization-service-migration:
        condition: service_completed_successfully
    ports:
      # Needed for the http server
      - "8080:8080"
      # Needed for the grpc server (if used)
      - "8083:8081"
      # Needed for the playground (Do not enable in prod!)
      - "3000:3000"
    environment:
      OPENFGA_DATASTORE_ENGINE: "postgres"
      OPENFGA_DATASTORE_URI: "postgres://cleanarc:cleanarc!123@clean-arc-relational-db:5432/openfga?sslmode=disable"
      OPENFGA_LOG_FORMAT: "json"
      OPENFGA_AUTHN_METHOD: "preshared"
      OPENFGA_AUTHN_PRESHARED_KEYS: ""
    command: run
    restart: always
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: 20m
  clean-arc-config-manager-service:
    image: hashicorp/consul:1.21
    container_name: clean-arc-config-manager-service
    networks:
      - clean-arc-network
    volumes:
      - "./docker_volumes/consul_data:/consul/data"
    ports:
      - "8500:8500"     # HTTP API / UI
      - "8600:8600/udp" # DNS
      - "8300:8300"     # Server RPC
      - "8301:8301"     # Serf LAN (communication between agents)
      - "8301:8301/udp"
      - "8302:8302"     # Serf WAN (communication across DCs)
      - "8302:8302/udp"
    command: agent -server -bootstrap -ui -client=0.0.0.0 -node=consul-server -datacenter=dc1
    restart: always
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: 20m
  clean-arc-be:
    image: python-clean-architecture-be:latest
    container_name: clean-arc-be
    depends_on:
      - clean-arc-relational-db
      - clean-arc-authentication-service
      - clean-arc-authorization-service
      - clean-arc-config-manager-service
    ports:
      - "8082:8082"
      - "5000:5000"
    networks:
      - clean-arc-network
    env_file:
      - .env
    restart: always
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: 20m
